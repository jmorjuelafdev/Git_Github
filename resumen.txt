RESUMEN DE COMANDOS DE GIT 

Comandos básicos:
- git init: Inicializa un repositorio en el directorio actual.
- git add <archivo>: Prepara un archivo para ser confirmado.
- git commit -m "mensaje": Realiza un commit con el mensaje proporcionado.
- git push: Sube los cambios confirmados al repositorio remoto.
- git pull: Obtiene los últimos cambios del repositorio remoto.
- git status: Muestra el estado actual del repositorio.

Flujos de Trabajo:
1. Flujo Básico:
   - Modificar archivos.
   - Preparar cambios: git add archivo.txt.
   - Confirmar cambios: git commit -m "Descripción de los cambios".
   - Subir cambios: git push origin main.

2. Flujo de trabajo profesional con Gitflow:
   - Crear una nueva rama de característica: git checkout -b feature/nueva-funcionalidad.
   - Finalizar la característica y hacer merge: git checkout main, git merge feature/nueva-funcionalidad.

Consejos útiles:
- Usa git stash para guardar cambios sin confirmarlos.
- Para deshacer el último commit sin borrar los cambios: git reset --soft HEAD~1.
 (ten cuidado, elimina el último commit de manera irreversible).
- Usa git log --oneline para ver una lista simplificada de los commits.

Problemas comunes y soluciones:
- Conflictos de merge: Si surge un conflicto al hacer merge, Git marcará los archivos afectados. Resuélvelos manualmente y luego confirma los cambios.
- Recuperar archivos borrados: Si accidentalmente borraste un archivo, usa git checkout -- <archivo> para recuperarlo.

Recursos:
- Git documentation: https://git-scm.com/doc
- GitHub Guides: https://guides.github.com/

TRABAJANDO CON REPOSITORIOS REMOTOS EN GitHub

1. Crear un repositorio remoto en GitHub
- Ingresa a GitHub y crea un nuevo repositorio desde la interfaz web.
- Copia la URL del repositorio (HTTPS o SSH).

2. Conectar un repositorio local a GitHub
Agrega el repositorio remoto a tu proyecto local con:
   git remote add origin <URL-del-repositorio>
Ejemplo:
git remote add origin https://github.com/usuario/nombre-del-repositorio.git

3. Subir cambios al repositorio remoto
Para enviar los cambios locales al repositorio remoto, usa:
   git push -u origin main
Esto configura origin como el repositorio remoto por defecto.

4. Clonar un repositorio existente
Si deseas trabajar en un repositorio ya existente en GitHub:
   git clone <URL-del-repositorio>
Esto descargará el repositorio y creará una copia local.

5. Obtener cambios del repositorio remoto
Si otros colaboradores realizaron cambios, puedes actualizarlos en tu repositorio local con:
   git pull origin main

6. Revisar la conexión con el repositorio remoto
Para verificar qué repositorios remotos están configurados, usa:
   git remote -v

Los Pull Requests son una forma de proponer cambios en un repositorio. Permiten la revisión y 
colaboración antes de fusionar esos cambios en la rama principal u otra rama específica.

1. Crear un Pull Request
- Asegúrate de haber subido tus cambios a una rama específica, por ejemplo, feature/nueva-funcionalidad:
   git checkout -b feature/nueva-funcionalidad
   # Haz cambios, añade y confirma
   git add .
   git commit -m "Añadida nueva funcionalidad"
   git push origin feature/nueva-funcionalidad

- En GitHub, ve a la pestaña "Pull Requests" del repositorio.
- Haz clic en "New Pull Request".
- Selecciona la rama base (por ejemplo, main) y la rama con tus cambios (por ejemplo, feature/nueva-funcionalidad).
- Agrega un título y descripción explicando los cambios realizados.
- Haz clic en "Create Pull Request".

2. Revisar un Pull Request
- Los colaboradores pueden revisar el PR, dejar comentarios y solicitar cambios.
- Si se aprueba, el propietario del repositorio o alguien con permisos puede fusionarlo a la rama base.

3. Fusionar un Pull Request
- Una vez aprobado, puedes fusionar los cambios usando la opción de "Merge" en GitHub. Existen varias estrategias de fusión:
- Merge commit: Agrega todos los cambios en un solo commit.
- Squash and merge: Combina todos los commits del PR en uno solo.
- Rebase and merge: Reaplica los commits sobre la rama base para un historial más lineal.

4. Cerrar un Pull Request
Si los cambios no son necesarios o deben ser revisados más tarde, puedes cerrar el PR sin fusionarlo.

Ejemplo de uso típico de Pull Requests:
- Crea una rama de trabajo (feature/nueva-funcionalidad).
- Realiza los cambios y súbelos al repositorio remoto.
- Crea un Pull Request desde la rama feature/nueva-funcionalidad hacia main.
- Participa en la revisión, realiza ajustes si son necesarios.
- Fusiona los cambios cuando el PR sea aprobado.

GitHub Pages permite alojar sitios web estáticos directamente desde un repositorio en GitHub.

Pasos para habilitar GitHub Pages:
1. Asegúrate de tener un repositorio con un archivo `index.html` en la rama principal.
2. Ve a la configuración del repositorio en GitHub.
3. Busca la sección "Pages" en la barra lateral.
4. Selecciona la rama que contiene tu sitio web (por lo general, `main`) y guarda los cambios.
5. Tu sitio estará disponible en: https://<usuario>.github.io/<repositorio>/.

Consejos útiles:
- Siempre asegúrate de trabajar en ramas y de sincronizarlas con el repositorio remoto para evitar conflictos.
- Configura un archivo .gitignore para evitar subir archivos sensibles o innecesarios (como contraseñas, binarios o carpetas como node_modules/).
- Antes de crear un Pull Request, actualiza tu rama con la última versión de la rama base para evitar conflictos
     git checkout main
     git pull origin main
     git checkout feature/nueva-funcionalidad
     git merge main
- GitHub Pages Es compatible con HTML, CSS y JavaScript.
- Si estás usando GitHub Pages y tu proyecto incluye archivos o carpetas que comienzan con un guion bajo (`_`) o utiliza tecnologías distintas a Jekyll 
(como React, Vue o sitios estáticos puros), crea un archivo vacío llamado `.nojekyll` en la raíz de tu repositorio. Esto desactiva el procesamiento 
automático de Jekyll y asegura que GitHub Pages sirva tus archivos tal como están, sin ignorarlos ni modificarlos.

















